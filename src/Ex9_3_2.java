/**
 * 在数组A[0..n-1]中，有所谓的魔术索引，满足条件A[i]=i。给定一个不下降序列，元素值可能相同，编写一个方法，判断在数组A中是否存在魔术索引。请思考一种复杂度优于o(n)的方法。
 * 给定一个int数组A和int n代表数组大小，请返回一个bool，代表是否存在魔术索引。
 * 测试样例：
 * [1,1,3,4,5]
 * 返回：true
 * Created by Nancy on 2016/12/9.
 * Url:https://github.com/Nancy945/CC150
 */
public class Ex9_3_2 {
    public boolean findMagicIndex(int[] A, int n) {
        //方法1
//        return findMagicIndex(A, 0, n - 1);
        //方法2
        for (int i = 0; i < n; ) {
            if (A[i] == i) {
                return true;
            } else {
                i = Math.max(A[i], i + 1);
            }
        }

        return false;
    }

    /**
     * 事实上，看到A[5]=3时按照二分查找的做法，我们需要递归搜索右半部分。不过，如搜索左半部分，
     * 我们可以跳过一些元素，值递归搜索A[0]到A[3]的元素。A[3]是第一个可能成为魔术索引的元素。
     * 综上：我们得到一种搜索模式，先比较midIndex和midValue是否相同。
     * 然后，若两者不同，则按如下方式递归搜索左半部分和右半部分。
     * <p>
     * 左半部分：搜索索引从start到min(midIndex-1,midValue)的元素。
     * <p>
     * 右半部分：搜索索引从max(midIndex+1,minValue)到end的元素。
     */
    private boolean findMagicIndex(int[] A, int start, int end) {


        if (start > end || start < 0 || end > A.length) {
            return false;
        }
        int mid = (end - start) / 2 + start;
        if (A[mid] == mid) {
            return true;
        } else {
            int leftEnd = Math.min(mid - 1, A[mid]);
            int rightStart = Math.max(mid + 1, A[mid]);
            return findMagicIndex(A, start, leftEnd) || findMagicIndex(A, rightStart, end);
        }

    }

    public static void main(String[] args) {
        int[] A = new int[]{
                0, 2, 3, 5, 6, 7, 7, 9, 9, 11, 13, 13, 13, 15, 15, 16, 18, 19, 19, 19, 19, 20, 20, 21, 22, 24, 26, 26, 27, 29, 29, 31, 32, 34, 36, 37, 37, 39, 41, 42, 44, 45, 47, 48, 48, 48, 49, 51, 53, 55, 55, 55, 57, 57, 58, 60, 61, 61, 63, 63, 64, 65, 67, 69, 70, 71, 71, 72, 74, 74, 74, 75, 75, 77, 78, 78, 79, 81, 82, 84, 86, 86, 88, 89, 90, 92, 92, 94, 96, 97, 97, 98, 98, 98, 99, 100, 100, 101, 102, 103, 103, 105, 106, 107, 107, 109, 110, 112, 113, 114, 115, 115, 116, 116, 118, 118, 120, 122, 124, 126, 126, 127, 129, 130, 131, 133, 133, 133, 134, 136, 137, 137, 138, 140, 140, 140, 142, 144, 146, 148, 149, 150, 150, 151, 153, 154, 156, 157, 159, 161, 161, 161, 161, 163, 165, 166, 167, 169, 169, 169, 171, 172, 172, 173, 174, 176, 176, 178, 180, 182, 183, 183, 185, 185, 187, 188, 188, 190, 190, 192, 193, 193, 194, 194, 194, 196, 197, 197, 198, 200, 202, 202, 204, 204, 204, 205, 207, 209, 210, 210, 212, 212, 213, 215, 217, 218, 219, 221, 223, 225, 227, 228, 229, 229, 231, 231, 233, 234, 236, 237, 239, 240, 241, 241, 241, 243, 243, 245, 245, 245, 245, 245, 245, 245, 245, 246, 248, 249, 251, 251, 251, 253, 255, 257, 259, 261, 263, 264, 266, 266, 266, 268, 269, 269, 271, 271, 272, 274, 276, 277, 278, 280, 281, 281, 283, 284, 285, 285, 285, 286, 286, 288, 289, 289, 291, 291, 293, 293, 294, 295, 297, 299, 300, 300, 300, 300, 301, 302, 303, 305, 306, 308, 308, 308, 310, 310, 310, 312, 312, 314, 316, 318, 319, 320, 322, 323, 324, 325
        };

        System.out.println(new Ex9_3_2().findMagicIndex(A, A.length));

    }
}
